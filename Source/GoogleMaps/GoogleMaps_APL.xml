<?xml version="1.0" encoding="utf-8"?>
<!--GoogleMaps plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<androidManifestUpdates>
		<addElements tag="application">
				<meta-data android:name="com.google.android.gms.version" 
					android:value="@integer/google_play_services_version" />
			<!--<meta-data android:name="com.google.android.geo.API_KEY"
					android:value="AIzaSyAIahxW93kRq42j2hnpK_5HBDXv4oufb8w"/>-->
			<meta-data android:name="com.google.android.geo.API_KEY"
					android:value="AIzaSyChN7lO4AdIZQR1hIItdThFjbqEjCwqT00"/>     

			<service
	            android:name="com.jeevcatgames.GPSService"
	            android:exported="false"
	            android:process=":remote"/>

		</addElements>

		<addElements tag="manifest">
			<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
			<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
		</addElements>	
	</androidManifestUpdates>
	<prebuildCopies>
		<copyDir src="$S(PluginDir)/Java" dst="$S(BuildDir)" />
	</prebuildCopies>
	<proguardAdditions>
    	<insert>
    		-keep class * extends java.util.ListResourceBundle {
			    protected Object[][] getContents();
			}

			-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {
			    public static final *** NULL;
			}

			-keepnames @com.google.android.gms.common.annotation.KeepName class *
			-keepclassmembernames class * {
			    @com.google.android.gms.common.annotation.KeepName *;
			}

			-keepnames class * implements android.os.Parcelable {
			    public static final ** CREATOR;
			}
	    </insert>
	</proguardAdditions>
	
	<gameActivityImportAdditions>
		<insert>
			import android.os.Bundle;
			import android.app.ActivityManager;
			
			import com.jeevcatgames.UEMapDialog;
			import com.jeevcatgames.GPSService;
		</insert>
	</gameActivityImportAdditions>
	<gameActivityOnStartAdditions>
		<insert>
			startedWithServiceRunning = isServiceRunning(GPSService.class);
			if(startedWithServiceRunning) {
				nativeResumeTracking();
				Log.debug("nativeResumeTracking");
			}

		</insert>
	</gameActivityOnStartAdditions>
	<gameActivityOnCreateAdditions>
		<insert>
			serviceIntent = new Intent(_activity, GPSService.class);
		</insert>
	</gameActivityOnCreateAdditions>
	<gameActivityClassAdditions>
		<insert>
    		private static final int REQUEST_CHECK_SETTINGS = 0x1;
			private UEMapDialog mMapDialog;
			private Intent serviceIntent;
			private boolean startedWithServiceRunning;

			public void AndroidThunkJava_CreateGoogleMap(final boolean trackingEnabled,
				final float posX, final float posY, 
				final float sizeX, final float sizeY, float renderX) {
			        Log.debug("In AndroidThunkJava_CreateGoogleMap");
			        DisplayMetrics dm = getResources().getDisplayMetrics();
			        final float scale = dm.widthPixels / renderX;
			        Log.debug("dm:" + dm.widthPixels + "render:" + renderX);

			        Log.debug("new UEMapDialog");
			        _activity.runOnUiThread(new Runnable() {
					    public void run() {
					        mMapDialog = new UEMapDialog(_activity, 
					        	trackingEnabled, startedWithServiceRunning,
					        	(int)(posX * scale), (int) (posY * scale), 
					        	(int) (sizeX * scale), (int) (sizeY * scale));
					        mMapDialog.show();
					    }
					});
		    }

		    public void AndroidThunkJava_RemoveGoogleMap() {
		        Log.debug("In AndroidThunkJava_RemoveGoogleMap");
		        mMapDialog.dismiss();
		        mMapDialog = null;
		    }

		    public void AndroidThunkJava_RunGPSService() {
		        Log.debug("In AndroidThunkJava_RunGPSService");
		        startService(serviceIntent);
		    }

		    public void AndroidThunkJava_KillGPSService() {
		        Log.debug("In AndroidThunkJava_KillGPSService");
		        startedWithServiceRunning = false;
		       	stopService(serviceIntent);
		    }

		    public void AndroidThunkJava_StartTracking() {
		    	Log.debug("In AndroidThunkJava_StartTracking");
		    	if(isServiceRunning(GPSService.class))
		    	{
    				sendBroadcast(new Intent(GPSService.START_TRACKING));
		    	}
		    }

		    public void AndroidThunkJava_DrawHistoricalPolyline(float lat[], float lng[]) {
		    	Log.debug("In AndroidThunkJava_DrawHistoricalPolyline");

		    	Intent intent = new Intent(UEMapDialog.RECEIVE_ALL_POINTS);
		        intent.putExtra("lat", lat).putExtra("lng", lng);
		        sendBroadcast(intent);
		    }

		    private boolean isServiceRunning(Class&lt;?&gt; serviceClass) {
			    ActivityManager manager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
			    for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
			        if (serviceClass.getName().equals(service.service.getClassName())) {
			            return true;
			        }
			    }
			    return false;
			}

		//public native void nativeLocationChanged(double lat, double lng);
			public native void nativeResumeTracking();
			
		</insert>
	</gameActivityClassAdditions>

	<gameActivityOnActivityResultAdditions>	
		<insert>
			if(requestCode == REQUEST_CHECK_SETTINGS){
				switch (resultCode) {
                    case RESULT_OK:
                        Log.debug("User agreed to make required location settings changes.");
                        Intent intent = new Intent(GPSService.SETUP_TRACKING);
        				sendBroadcast(intent);
                        break;
                    case RESULT_CANCELED:
                        Log.debug("User chose not to make required location settings changes.");
                        break;
                }
			}
		</insert>
	</gameActivityOnActivityResultAdditions>
	<gameActivityOnPauseAdditions>
		<insert>
			if (mMapDialog !=null)
				mMapDialog.hide();
		</insert>
	</gameActivityOnPauseAdditions>
	<gameActivityOnResumeAdditions>
		<insert>
			if (mMapDialog != null) 
				mMapDialog.OnResume();
		</insert>
	</gameActivityOnResumeAdditions>
</root>